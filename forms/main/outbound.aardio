import web.json;
import win.dlg.message;
import fonts.fontAwesome;
import win.ui;
/*DSG{{*/
var winform = win.form(text="winXray - 代理服务器配置";right=1000;bottom=494;bgcolor=16777215;exmode="none";mode="popup")
winform.add(
btnAddOutbound={cls="plus";text="新 增";left=663;top=427;right=766;bottom=463;align="left";bgcolor=14935259;db=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF067';notify=1;textPadding={left=40};z=16};
btnGenGuid={cls="plus";text="生成";left=914;top=232;right=986;bottom=257;align="left";clip=1;dr=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF0AD';notify=1;textPadding={left=30};z=18};
btnInsertField={cls="plus";text="插入更多配置字段";left=10;top=0;right=191;bottom=24;align="left";dl=1;dt=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=12}};iconText='\uF196 ';notify=1;textPadding={left=30};z=17};
btnSaveOutbound={cls="plus";text="保 存";left=784;top=427;right=887;bottom=463;align="left";bgcolor=11580047;db=1;disabled=1;dr=1;font=LOGFONT(h=-13);iconStyle={align="left";font=LOGFONT(h=-13;name='FontAwesome');padding={left=22}};iconText='\uF0C7';notify=1;textPadding={left=40};z=15};
cmbNetwork={cls="combobox";left=656;top=70;right=814;bottom=96;dr=1;dt=1;edge=1;items={"tcp";"kcp";"ws";"h2";"quic"};mode="dropdown";z=12};
cmbProtocol={cls="combobox";left=656;top=28;right=814;bottom=54;dr=1;dt=1;edge=1;items={"vmess";"vless";"trojan";"trojan-go";"shadowsocks"};mode="dropdown";z=11};
cmbSecurity={cls="combobox";left=656;top=113;right=814;bottom=139;dr=1;dt=1;edge=1;items={"auto";"none";"chacha20-poly1305";"aes-128-gcm"};mode="dropdown";z=14};
editAddress={cls="plus";left=656;top=156;right=878;bottom=180;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=1};
editId={cls="plus";left=656;top=236;right=986;bottom=260;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};clip=1;dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={right=75;bottom=1};z=19};
editOutbound={cls="edit";left=15;top=25;right=472;bottom=462;db=1;dl=1;dr=1;dt=1;edge=1;font=LOGFONT(h=-13);hscroll=1;multiline=1;vscroll=1;z=13};
editPort={cls="plus";left=656;top=197;right=745;bottom=221;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=3};
editPs={cls="plus";left=656;top=279;right=878;bottom=303;align="left";bgcolor=16777215;border={bottom=1;color=-8355712};dr=1;dt=1;editable="edit";font=LOGFONT(h=-16);textPadding={bottom=1};z=6};
lbSecurity={cls="static";text="加密方式( security ):";left=473;top=109;right=641;bottom=135;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=9};
static={cls="static";text="服务器( address ):";left=481;top=151;right=641;bottom=177;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=2};
static10={cls="static";text="代理协议( protocol ):";left=473;top=26;right=641;bottom=52;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=10};
static2={cls="static";text="端口( port ):";left=498;top=193;right=641;bottom=219;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=4};
static3={cls="static";text="密码( id ):";left=498;top=235;right=641;bottom=261;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=5};
static4={cls="static";text="备注( ps ):";left=498;top=277;right=641;bottom=303;align="right";bgcolor=16777215;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=7};
static5={cls="static";text="传输协议( network ):";left=473;top=67;right=641;bottom=99;align="right";bgcolor=16777215;dl=1;dr=1;dt=1;font=LOGFONT(h=-16);transparent=1;z=8}
)
/*}}*/

winform.outboundConfig = {};
winform.addOutboundField = function(k,v){
	if(winform.outboundConfig[k] !== null){
		return winform.msgInfo("该字段已经存在，不需要添加！"); 
	}
	
	winform.outboundConfig[k] = v;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

winform.cmbProtocol.onListChange = function(){ 
	var sel = winform.cmbProtocol.selText;
	if(sel=="vmess"){
		winform.cmbSecurity.items = {
			"auto";"none";"chacha20-poly1305";"aes-128-gcm"
		}
		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "auto";
	}
	elseif(sel=="shadowsocks"){
		winform.cmbSecurity.items = {
			"aes-256-gcm";"aes-128-gcm";"aes-256-cfb";"aes-128-cfb";"chacha20";"chacha20-ietf";"chacha20-poly1305";"chacha20-ietf-poly1305";
		}
		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "aes-256-gcm";
	}
	elseif(sel=="vless"){
		winform.cmbSecurity.items = {
			"none";
		}
		winform.cmbSecurity.selIndex = 1;
		winform.outboundConfig.security = "none";
	}
	else {
		winform.cmbSecurity.items = { }	
		winform.outboundConfig.security = null;
	} 
	
	table.define(winform.outboundConfig);
	winform.outboundConfig.protocol = sel;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

winform.cmbNetwork.onListChange = function(){ 
	var sel = winform.cmbNetwork.selText;
	winform.outboundConfig.network = sel;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);	
}

winform.cmbSecurity.onListChange = function(){ 
	var sel = winform.cmbSecurity.selText;
	winform.outboundConfig.security = sel;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);	
}
	
winform.editId.editBox.onChange = function(){  
	winform.outboundConfig.id = owner.text;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

winform.editPort.editBox.onChange = function(){  
	winform.outboundConfig.port = tonumber(owner.text):443;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

winform.editAddress.editBox.onChange = function(){  
	winform.outboundConfig.address = owner.text;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

winform.editPs.editBox.onChange = function(){  
	winform.outboundConfig.ps = owner.text;
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
}

var editOutboundTip = {
	address = {"代理服务器地址";"值可以是域名或者IP地址"};
	alterId = {"额外ID";"仅用于VMESS协议，与服务器一致即可"};
	aid = {"额外ID(alterId)";"数值,仅用于VMESS协议，与服务器一致即可"};
	network = {"传输协议(network)";"可选值为tcp,ws等"};
	net = {"传输协议(network)";"可选值为tcp,ws等"};
	type = {"伪装类型";"默认的可选值为none,http等,kcp或quic此字段表示header.type，可选值为 none,srtp,utp,wechat-video,dtls,wireguard"}; 
	ps = {"备注";"备注"}; 
	tls = {"是否启用TLS";"可选值为tls,xtls或空值,vless协议省略时默认值为tls"}; 
	path = {"请求路径";"用于ws,http等协议指定请求路径"}; 
	httpMethod = {"HTTP请求方法";"用于http协议指定请求方法"}; 
	headers = {"HTTP请求头";"用于ws,http等协议指定请求头"}; 
	id = {"密码";"服务器密码"}; 
	host = {"主机名";"用于指定http,ws等协议请求头中的主机名"}; 
	protocol = {"协议";"可选值为 vmess,vless,shadowsocks,trojan,trojan-go 之一"}; 
	port = {"端口";"服务器端口,数值"}; 
	security = {"加密方式";"可省略,vmess协议默认为auto,vless协议默认为none"};
	sni = {"TLS服务器名";"TLS客户端请求中的服务器名字段,如果不指定则默认取host或address字段值。"}; 
	flow = {"流控";"目前仅用于选择 XTLS 的算法,省略时默认值为xtls-rprx-direct"}; 
	concurrency = {"Mux多路复用:最大并发连接数";"最小值1，最大值1024，特殊值-1，不加载mux模块。缺省由winXray根据连接协议自动设定此值。"}; 
}

winform.editOutbound.wndproc = function(hwnd,message,wParam,lParam){
	if(message == 0x202/*_WM_LBUTTONUP*/){
		var lineIndex = winform.editOutbound.lineFromChar();
		if(lineIndex == winform.editOutbound.preLineIndex){
			return; 
		}
		winform.editOutbound.preLineIndex = lineIndex;
		
		var line = winform.editOutbound.lineText();
		var n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(%"")[\,\s]*$`); 
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*(\d+)[\,\s]*$`);
		if( !n ) n,v = string.match(line,`^\s*\"(\w+)\"\s*\:\s*\{`);
		if(editOutboundTip[n]){
			winform.editOutbound.showInfoTip(editOutboundTip[n][1],editOutboundTip[n][2])
		}
	} 
}
	
import win.ui.menu;
var insertFieldMenu = { 
	{ "允许忽略证书:allowInsecure";
		function(id){
			winform.addOutboundField("allowInsecure",true);
		} 
	};
	{ "TLS服务器名:sni";
		function(id){
			winform.addOutboundField("sni","");
		} 
	};
	{ "启用TLS:tls";
		function(id){
			winform.addOutboundField("tls","xtls");
		} 
	};
	{ "流控:flow";
		function(id){
			winform.addOutboundField("flow","xtls-rprx-direct");
		} 
	};
	{ "多路复用最大连接:concurrency";
		function(id){
			winform.addOutboundField("concurrency",4);
		} 
	};

	{ "伪装类型:type";
		function(id){
			winform.addOutboundField("type","http");
		} 
	};
	{ "备注:ps";
		function(id){
			winform.addOutboundField("ps","");
		} 
	};
	{ "请求主机名:host";
		function(id){
			winform.addOutboundField("host","");
		} 
	};
	{ "请求路径:path";
		function(id){
			winform.addOutboundField("path","/");
		} 
	};
	{ "HTTP请求方法:httpMethod";
		function(id){
			winform.addOutboundField("httpMethod","GET");
		} 
	};
	{ "HTTP请求头:headers";
		function(id){
			winform.addOutboundField("headers",{method="GET"});
		} 
	};
	{ "绑定的订阅网址:subscribeUrl";
		function(id){
			winform.addOutboundField("subscribeUrl","https://"); 
		} 
	};
	{ "允许自动测试并连接:autoConnect";
		function(id){
			winform.addOutboundField("autoConnect",false); 
		} 
	};
	{ "SSH管理端口:sshPort";
		function(id){
			winform.addOutboundField("sshPort",22);
		} 
	}; 
} 
winform.editOutbound.enablePopMenu({
	{ "插入配置字段";insertFieldMenu}
})

import style;
winform.btnInsertField.skin(style.transButton)
winform.btnInsertField.oncommand = function(id,event){
	var popInsertFieldMenu = win.ui.popmenu(winform);
	popInsertFieldMenu.addTable(insertFieldMenu);
	
	var x,y,cx,cy = winform.btnInsertField.getPos();
	popInsertFieldMenu.popup(x,y+cy);
}

import win.debounce;
var onEditChange = win.debounce(
	function(){
		var data,err = web.json.tryParse(winform.editOutbound.text); 
		if(!data){
			if(err){
				return winform.editOutbound.showErrorTip("JSON 语法错误",err)	
			}
			return;
		}
		
		var editPortChange = winform.editPort.editBox.onChange;
		var editIdChange = winform.editId.editBox.onChange;
		var editAddressChange = winform.editAddress.editBox.onChange;
		var editPsChange = winform.editPs.editBox.onChange;
		
		winform.editPort.editBox.onChange = null;
		winform.editId.editBox.onChange = null;
		winform.editAddress.editBox.onChange = null;
		winform.editPs.editBox.onChange = null;
		
		winform.editPort.text = data.port;
		winform.editId.text = data.id;
		winform.editAddress.text = data.address;
		winform.editPs.text = data.ps;
		
		winform.editPort.editBox.onChange = editPortChange;
		winform.editId.editBox.onChange = editIdChange;
		winform.editAddress.editBox.onChange = editAddressChange;
		winform.editPs.editBox.onChange = editPsChange;
		
		var cmbNetworkChange = winform.cmbNetwork.onListChange;
		var cmbProtocolChange = winform.cmbProtocol.onListChange;
		var cmbSecurityChange = winform.cmbSecurity.onListChange;
		
		winform.cmbNetwork.onListChange = null;
		winform.cmbProtocol.onListChange = null;
		winform.cmbSecurity.onListChange = null;
		
		winform.cmbNetwork.selText = data.network;
		winform.cmbProtocol.selText = data.protocol;
		
		if(data.protocol=="vmess"){
			winform.cmbSecurity.items = { "auto";"none";"chacha20-poly1305";"aes-128-gcm" } 
		}
		elseif(data.protocol=="shadowsocks"){
			winform.cmbSecurity.items = { "aes-256-gcm";"aes-128-gcm";"aes-256-cfb";"aes-128-cfb";"chacha20";"chacha20-ietf";"chacha20-poly1305";"chacha20-ietf-poly1305";} 
		}
		elseif(data.protocol=="vless"){
			winform.cmbSecurity.items = { "none"; } 
		}
		else {
			winform.cmbSecurity.items = { }	 
		}  
		winform.cmbSecurity.selText = data.security;
		
		winform.cmbNetwork.onListChange = cmbNetworkChange;
		winform.cmbProtocol.onListChange = cmbProtocolChange;
		winform.cmbSecurity.onListChange = cmbSecurityChange;
				
	},500
)	

winform.editOutbound.onChange = function(){ 
	onEditChange();
}


winform.btnSaveOutbound.oncommand = function(id,event){
	if(!#winform.editAddress.text){
		return winform.editAddress.editBox.showErrorTip("配置错误","服务器地址不能为空")
	}
	
	if(!#winform.editPort.text){
		return winform.editPort.editBox.showErrorTip("配置错误","端口不能为空")
	}
	
	if(!#winform.editId.text){
		return winform.editId.editBox.showErrorTip("配置错误","密码不能为空")
	}
	
	table.assign(winform.origOutboundConfig,winform.outboundConfig);
	publish("uiCommand.restartV2RayCore");
	publish("outbounds.updateConfigJson");
	winform.endModal();
}

import config;
winform.btnAddOutbound.oncommand = function(id,event){
	if(!#winform.editAddress.text){
		return winform.editAddress.editBox.showErrorTip("配置错误","服务器地址不能为空")
	}
	
	if(!#winform.editPort.text){
		return winform.editPort.editBox.showErrorTip("配置错误","端口不能为空")
	}
	
	if(!#winform.editId.text){
		return winform.editId.editBox.showErrorTip("配置错误","密码不能为空")
	}
	
	table.push(config.proxy.outbounds,winform.outboundConfig); 
	publish("uiCommand.restartV2RayCore");
	publish("outbounds.updateConfigJson");
	winform.endModal();
}

import win.guid;
winform.btnGenGuid.oncommand = function(id,event){
	var guid = win.guid.create();
	winform.editId.text = string.lower( tostring(guid) );
}
winform.btnGenGuid.skin(style.link)


winform.setOutboundConfig = function(cfg){
	
	winform.btnAddOutbound.skin(style.button);
	winform.btnSaveOutbound.skin(style.primaryButton);
	winform.btnSaveOutbound.disabled = false;

	winform.origOutboundConfig = cfg;
	winform.outboundConfig = table.clone(cfg);
	winform.editOutbound.text = web.json.stringify(winform.outboundConfig,true,false);
	onEditChange();
}
winform.setOutboundConfig({
	port = 443;
	protocol = "vmess";
	network = "tcp";
});

winform.btnSaveOutbound.skin(style.button)
winform.btnAddOutbound.skin(style.primaryButton)
winform.btnSaveOutbound.disabled = true;

winform.show();
win.loopMessage();
return winform;